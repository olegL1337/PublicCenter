// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using PublicCenter.DAL;

namespace PublicCenter.Migrations
{
    [DbContext(typeof(PublicContext))]
    [Migration("20190525152706_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn)
                .HasAnnotation("ProductVersion", "2.1.8-servicing-32085")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("PublicCenter.Models.Address", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Addr");

                    b.Property<string>("City");

                    b.Property<string>("District");

                    b.HasKey("ID");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("PublicCenter.Models.Client", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Ability_Self_Service");

                    b.Property<int>("Age");

                    b.Property<string>("Condition_Giving_Service");

                    b.Property<DateTime>("Date_birth");

                    b.Property<string>("Degree_Indiv_Need");

                    b.Property<int?>("DepartmentID");

                    b.Property<string>("Father_name");

                    b.Property<string>("First_name");

                    b.Property<int?>("Formal_addressId");

                    b.Property<string>("Group");

                    b.Property<string>("Group_Motor_Activity");

                    b.Property<string>("Identify_number")
                        .IsRequired();

                    b.Property<bool>("Is_active");

                    b.Property<string>("Last_name");

                    b.Property<string>("Mobile_phone");

                    b.Property<string>("Number_Of_Visit");

                    b.Property<string>("Organization_Service_House");

                    b.Property<string>("Passport");

                    b.Property<string>("Period");

                    b.Property<string>("Personal_file_number");

                    b.Property<string>("Phone_stat");

                    b.Property<int?>("Real_addressId");

                    b.Property<bool>("Sex");

                    b.Property<int?>("WorkerID");

                    b.HasKey("ID");

                    b.HasAlternateKey("Identify_number");

                    b.HasIndex("DepartmentID");

                    b.HasIndex("Formal_addressId");

                    b.HasIndex("Real_addressId");

                    b.HasIndex("WorkerID");

                    b.ToTable("Clients");
                });

            modelBuilder.Entity("PublicCenter.Models.ClientStatus", b =>
                {
                    b.Property<int?>("ClientID");

                    b.Property<int?>("StatusId");

                    b.HasKey("ClientID", "StatusId");

                    b.HasIndex("StatusId");

                    b.ToTable("ClientStatuses");
                });

            modelBuilder.Entity("PublicCenter.Models.ClientTypeOfService", b =>
                {
                    b.Property<int?>("ClientID");

                    b.Property<int?>("ServiceID");

                    b.HasKey("ClientID", "ServiceID");

                    b.HasIndex("ServiceID");

                    b.ToTable("ClientTypeOfServices");
                });

            modelBuilder.Entity("PublicCenter.Models.Department", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("ManagerId");

                    b.HasKey("ID");

                    b.ToTable("Departments");
                });

            modelBuilder.Entity("PublicCenter.Models.DoneWork", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("ClientID");

                    b.Property<DateTime>("Date_of_service");

                    b.Property<int?>("ServiceID");

                    b.Property<int?>("WorkerID");

                    b.HasKey("ID");

                    b.HasIndex("ClientID");

                    b.HasIndex("ServiceID");

                    b.HasIndex("WorkerID");

                    b.ToTable("DoneWorks");
                });

            modelBuilder.Entity("PublicCenter.Models.Schedule", b =>
                {
                    b.Property<int?>("ClientID");

                    b.Property<string>("Day");

                    b.HasKey("ClientID", "Day");

                    b.ToTable("Schedules");
                });

            modelBuilder.Entity("PublicCenter.Models.Service", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("GroupOfMotorActivity");

                    b.Property<string>("Name");

                    b.Property<double>("Price");

                    b.Property<int?>("ServiceTypeID");

                    b.HasKey("ID");

                    b.HasIndex("ServiceTypeID");

                    b.ToTable("Services");
                });

            modelBuilder.Entity("PublicCenter.Models.ServiceType", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("ID");

                    b.ToTable("ServiceTypes");
                });

            modelBuilder.Entity("PublicCenter.Models.Status", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Status_name");

                    b.HasKey("ID");

                    b.ToTable("Statuses");
                });

            modelBuilder.Entity("PublicCenter.Models.Worker", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("AddressID");

                    b.Property<int>("Age");

                    b.Property<DateTime>("Date_birth");

                    b.Property<int?>("DepartmentID");

                    b.Property<string>("Father_name");

                    b.Property<string>("First_name");

                    b.Property<string>("Identify_number");

                    b.Property<string>("Last_name");

                    b.Property<string>("Mobile_phone");

                    b.Property<string>("Passport");

                    b.Property<string>("Phone_stat");

                    b.Property<string>("Role");

                    b.Property<bool>("Sex");

                    b.HasKey("ID");

                    b.HasIndex("AddressID");

                    b.HasIndex("DepartmentID")
                        .IsUnique();

                    b.ToTable("Workers");
                });

            modelBuilder.Entity("PublicCenter.Models.Client", b =>
                {
                    b.HasOne("PublicCenter.Models.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentID");

                    b.HasOne("PublicCenter.Models.Address", "Formal_address")
                        .WithMany()
                        .HasForeignKey("Formal_addressId");

                    b.HasOne("PublicCenter.Models.Address", "Real_address")
                        .WithMany()
                        .HasForeignKey("Real_addressId");

                    b.HasOne("PublicCenter.Models.Worker", "Worker")
                        .WithMany()
                        .HasForeignKey("WorkerID");
                });

            modelBuilder.Entity("PublicCenter.Models.ClientStatus", b =>
                {
                    b.HasOne("PublicCenter.Models.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PublicCenter.Models.Status", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("PublicCenter.Models.ClientTypeOfService", b =>
                {
                    b.HasOne("PublicCenter.Models.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PublicCenter.Models.Service", "Service")
                        .WithMany()
                        .HasForeignKey("ServiceID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("PublicCenter.Models.DoneWork", b =>
                {
                    b.HasOne("PublicCenter.Models.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientID");

                    b.HasOne("PublicCenter.Models.Service", "Service")
                        .WithMany()
                        .HasForeignKey("ServiceID");

                    b.HasOne("PublicCenter.Models.Worker", "Worker")
                        .WithMany()
                        .HasForeignKey("WorkerID");
                });

            modelBuilder.Entity("PublicCenter.Models.Schedule", b =>
                {
                    b.HasOne("PublicCenter.Models.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("PublicCenter.Models.Service", b =>
                {
                    b.HasOne("PublicCenter.Models.ServiceType", "ServiceType")
                        .WithMany()
                        .HasForeignKey("ServiceTypeID");
                });

            modelBuilder.Entity("PublicCenter.Models.Worker", b =>
                {
                    b.HasOne("PublicCenter.Models.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressID");

                    b.HasOne("PublicCenter.Models.Department", "Department")
                        .WithOne("Worker")
                        .HasForeignKey("PublicCenter.Models.Worker", "DepartmentID");
                });
#pragma warning restore 612, 618
        }
    }
}
